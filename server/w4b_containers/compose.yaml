# /server/w4b_containers/compose.yaml
name: w4b
version: '3.9'

networks:
  w4b_frontend:
    name: w4b_frontend
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 10.110.0.0/24
          gateway: 10.110.0.1
    labels:
      hive.w4b.description: "Frontend network for web services"
      hive.w4b.type: "frontend"

  w4b_application:
    name: w4b_application
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 10.120.1.0/24
          gateway: 10.120.1.1
    labels:
      hive.w4b.description: "Application service network"
      hive.w4b.type: "application"

  w4b_database:
    name: w4b_database
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 10.120.2.0/24
          gateway: 10.120.2.1
    labels:
      hive.w4b.description: "Database network"
      hive.w4b.type: "database"

  w4b_monitoring:
    name: w4b_monitoring
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 10.120.3.0/24
          gateway: 10.120.3.1
    labels:
      hive.w4b.description: "Monitoring network"
      hive.w4b.type: "monitoring"

  w4b_vpn:
    name: w4b_vpn
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 10.120.4.0/24
          gateway: 10.120.4.1
    labels:
      hive.w4b.description: "VPN network for edge devices"
      hive.w4b.type: "vpn"

  w4b_backend:
    name: w4b_backend
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 10.110.1.0/24
          gateway: 10.110.1.1
    labels:
      hive.w4b.description: "Backend service network"
      hive.w4b.type: "backend"

volumes:
  # Keycloak volumes
  w4b_keycloak_postgres: {}
  w4b_keycloak_config: {}
  w4b_keycloak_data: {}
  w4b_keycloak_themes: {}
  w4b_keycloak_providers: {}

  # TimescaleDB volumes
  w4b_timescaledb_data: {}
  w4b_timescaledb_config: {}

  # Application DB volumes
  w4b_postgres_app_data: {}
  w4b_postgres_app_config: {}

  # Redis volumes  
  w4b_redis_data: {}
  w4b_redis_config: {}

  # Monitoring volumes
  w4b_prometheus_data: {}
  w4b_prometheus_config: {}
  w4b_grafana_data: {}
  w4b_grafana_config: {}
  
  # Logging volumes
  w4b_loki_data: {}
  w4b_loki_config: {}
  w4b_vector_data: {}
  w4b_vector_config: {}

services:
  w4b_timescaledb:
    image: docker.io/timescale/timescaledb:latest-pg16
    container_name: w4b_timescaledb
    networks:
      w4b_database:
    ports:
      - "127.0.0.1:30432:5432"
    volumes:
      - w4b_timescaledb_data:/var/lib/postgresql/data
      - w4b_timescaledb_config:/etc/postgresql
    environment:
      POSTGRES_DB: w4b_metrics
      POSTGRES_USER: ${W4B__TIMESCALEDB_USER}
      POSTGRES_PASSWORD: ${W4B__TIMESCALEDB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/timescaledb_user)"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "1000:1000"
    labels:
      hive.w4b.group: "database"
      hive.w4b.description: "TimescaleDB Time-series Database"
      hive.w4b.type: "database"
      hive.w4b.priority: "10"

  w4b_postgres_app:
    image: docker.io/library/postgres:17.2
    container_name: w4b_postgres_app
    networks:
      w4b_backend:
        ipv4_address: 10.110.1.20
    ports:
      - "127.0.0.1:30433:5432"
    volumes:
      - w4b_postgres_app_data:/var/lib/postgresql/data
      - w4b_postgres_app_config:/etc/postgresql:ro
    environment:
      POSTGRES_DB: w4b_app
      POSTGRES_USER: ${W4B__POSTGRES_APP_USER}
      POSTGRES_PASSWORD: ${W4B__POSTGRES_APP_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    healthcheck:
      test: pg_isready -U ${W4B__POSTGRES_APP_USER} -d w4b
      interval: 5s
      timeout: 5s
      retries: 3
    logging:
      driver: "k8s-file"
    user: "postgres:postgres"
    command: >
      postgres 
      -c 'max_connections=200'
      -c 'listen_addresses=*'
    restart: unless-stopped
    labels:
      hive.w4b.group: "database"
      hive.w4b.description: "Application PostgreSQL Database"
      hive.w4b.type: "database"
      hive.w4b.priority: "10"

  w4b_postgres_keycloak:
    image: docker.io/library/postgres:17.2
    container_name: w4b_postgres_keycloak
    networks:
      w4b_backend:
        ipv4_address: 10.110.1.10  # Fixed IP address
        aliases:
          - postgres_keycloak
    ports:
      - "127.0.0.1:30434:5432"
    volumes:
      - w4b_keycloak_postgres:/var/lib/postgresql/data
      - ./config/postgres_keycloak:/etc/postgresql:ro
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${W4B__POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${W4B__POSTGRES_KEYCLOAK_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    healthcheck:
      test: pg_isready -U ${W4B__POSTGRES_KEYCLOAK_USER} -d keycloak
      interval: 5s
      timeout: 5s
      retries: 3
    logging:
      driver: "k8s-file"
    user: "postgres:postgres"
    command: >
      postgres 
      -c 'log_statement=all' 
      -c 'log_connections=on'
      -c 'max_connections=200'
      -c 'listen_addresses=*'
    restart: unless-stopped
    labels:
      hive.w4b.group: "auth"
      hive.w4b.description: "Keycloak PostgreSQL Database"
      hive.w4b.type: "database"
      hive.w4b.priority: "10"
      hive.w4b.required_by: "w4b_keycloak"

  w4b_redis:
    image: docker.io/library/redis:7.2.3
    container_name: w4b_redis
    networks:
      w4b_backend:
        ipv4_address: 10.110.1.40
      w4b_database:
    ports:
      - "127.0.0.1:30379:6379"
    volumes:
      - w4b_redis_data:/data
      - w4b_redis_config:/usr/local/etc/redis:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 3
    logging:
      driver: "k8s-file"
    user: "redis:redis"
    restart: unless-stopped
    labels:
      hive.w4b.group: "database"
      hive.w4b.description: "Redis Cache Server"
      hive.w4b.type: "cache"
      hive.w4b.priority: "20"

  w4b_keycloak:
    image: docker.io/keycloak/keycloak:23.0.3
    container_name: w4b_keycloak
    networks:
      w4b_frontend:
      w4b_backend:
        aliases:
          - keycloak
    hostname: keycloak
    dns:
      - 10.120.2.1
    extra_hosts:
      - "postgres_keycloak:10.120.2.3"
    ports:
      - "30080:8080"
    volumes:
      - w4b_keycloak_config:/opt/keycloak/conf:ro
      - w4b_keycloak_data:/opt/keycloak/data
      - w4b_keycloak_themes:/opt/keycloak/themes
      - w4b_keycloak_providers:/opt/keycloak/providers
      - ./themes/keycloak:/opt/keycloak/themes/custom:ro
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://10.110.1.10:5432/keycloak
      KC_DB_USERNAME: ${W4B__POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${W4B__POSTGRES_KEYCLOAK_PASSWORD}
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: ${W4B__KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${W4B__KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: "true"
      KC_PROXY: none
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_CACHE: local
      KC_TRANSACTION_XA_ENABLED: "false"
    healthcheck:
      test: curl -f http://localhost:8080/health/ready || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "k8s-file"
    user: "keycloak:keycloak"
    command:
      - "start-dev"
      - "--db=postgres"
      - "--db-url=jdbc:postgresql://10.110.1.10:5432/keycloak"
      - "--db-username=${W4B__POSTGRES_KEYCLOAK_USER}"
      - "--db-password=${W4B__POSTGRES_KEYCLOAK_PASSWORD}"
      - "--http-enabled=true"
      - "--http-port=8080"
      - "--hostname=localhost"
      - "--hostname-strict=false"
      - "--health-enabled=true"
      - "--metrics-enabled=true"
      - "--cache=local"
      - "--transaction-xa-enabled=false"
    depends_on:
      w4b_postgres_keycloak:
        condition: service_healthy
    restart: unless-stopped
    labels:
      hive.w4b.group: "auth"
      hive.w4b.description: "Keycloak Authentication Server"
      hive.w4b.type: "service"
      hive.w4b.priority: "30"
      hive.w4b.depends_on: "w4b_postgres_keycloak"

  w4b_prometheus:
    image: docker.io/prom/prometheus:v2.48.1
    container_name: w4b_prometheus
    networks:
      w4b_monitoring:
      w4b_vpn:
      w4b_application:
    hostname: prometheus
    ports:
      - "127.0.0.1:30090:9090"
    volumes:
      - w4b_prometheus_data:/prometheus
      - w4b_prometheus_config:/etc/prometheus:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "k8s-file"
    user: "nobody:nogroup"
    restart: unless-stopped
    labels:
      hive.w4b.group: "monitoring"
      hive.w4b.description: "Prometheus Metrics Database"
      hive.w4b.type: "monitoring"
      hive.w4b.priority: "20"
      hive.w4b.required_by: "w4b_grafana"

  w4b_alertmanager:
    image: docker.io/prom/alertmanager:v0.26.0
    container_name: w4b_alertmanager
    networks:
      w4b_monitoring:
    ports:
      - "30093:9093"
    volumes:
      - ./config/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"
    labels:
      hive.w4b.group: "monitoring"
      hive.w4b.description: "Prometheus Alert Manager"
      hive.w4b.type: "monitoring"
      hive.w4b.priority: "30"
      hive.w4b.depends_on: "w4b_prometheus"

  w4b_grafana:
    image: docker.io/grafana/grafana:10.2.3
    container_name: w4b_grafana
    networks:
      w4b_frontend:
      w4b_monitoring:
      w4b_backend:
    hostname: grafana
    dns:
      - 10.120.3.1
    ports:
      - "127.0.0.1:30000:3000"
    volumes:
      - w4b_grafana_data:/var/lib/grafana
      - w4b_grafana_config:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_USER: ${W4B__GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${W4B__GRAFANA_ADMIN_PASSWORD}
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${W4B__GRAFANA_OAUTH_SECRET}
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: "Keycloak"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://keycloak:8443/realms/hive/protocol/openid-connect/auth"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://keycloak:8443/realms/hive/protocol/openid-connect/token"
    depends_on:
      w4b_loki:
        condition: service_started
      w4b_prometheus:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "k8s-file"
    user: "grafana:grafana"
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      hive.w4b.group: "monitoring"
      hive.w4b.description: "Grafana Visualization Platform"
      hive.w4b.type: "visualization"
      hive.w4b.priority: "40"
      hive.w4b.depends_on: "w4b_prometheus,w4b_loki"

  w4b_node_exporter:
    image: docker.io/prom/node-exporter:v1.7.0
    container_name: w4b_node_exporter
    networks:
      w4b_monitoring:
    ports:
      - "30100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    restart: unless-stopped
    user: "1000:1000"
    labels:
      hive.w4b.group: "monitoring"
      hive.w4b.description: "Node System Metrics Exporter"
      hive.w4b.type: "exporter"
      hive.w4b.priority: "10"

  w4b_vector:
    image: docker.io/timberio/vector:0.34.0-alpine
    container_name: w4b_vector
    networks:
      w4b_monitoring:
    ports:
      - "127.0.0.1:30686:8686"
    volumes:
      - w4b_vector_data:/vector
      - w4b_vector_config:/etc/vector/vector.yaml:ro
      - /var/log:/var/log:ro
    command: ["--config-yaml", "/etc/vector/vector.yaml"]
    depends_on:
      w4b_loki:
        condition: service_started
    healthcheck:
      test: ["CMD", "vector", "validate", "--config", "/etc/vector/vector.yaml"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    entrypoint: >
      sh -c "vector validate --config /etc/vector/vector.yaml && exec vector --config /etc/vector/vector.yaml"
    labels:
      hive.w4b.group: "logging"
      hive.w4b.description: "Vector Log Router"
      hive.w4b.type: "logging"
      hive.w4b.priority: "20"
      hive.w4b.depends_on: "w4b_loki"

  w4b_loki:
    image: docker.io/grafana/loki:2.9.3
    container_name: w4b_loki
    networks:
      w4b_monitoring:
    ports:
      - "127.0.0.1:30100:3100"
    volumes:
      - w4b_loki_data:/loki
      - w4b_loki_config:/etc/loki
      - ./data/loki:/data
      - ./data/loki/wal:/wal
    command: -config.file=/etc/loki/loki-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    entrypoint: >
      sh -c "mkdir -p /loki/chunks && chmod -R 777 /loki && exec /usr/bin/loki -config.file=/etc/loki/loki-config.yaml"
    labels:
      hive.w4b.group: "logging"
      hive.w4b.description: "Loki Log Aggregator"
      hive.w4b.type: "logging"
      hive.w4b.priority: "10"