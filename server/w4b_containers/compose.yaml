# /server/w4b_containers/docker-compose.yaml

version: '3.9'

networks:
  w4b_frontend:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 10.90.0.0/24
          gateway: 10.90.0.1

  w4b_application:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 10.90.1.0/24
          gateway: 10.90.1.1

  w4b_database:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 10.90.2.0/24
          gateway: 10.90.2.1

  w4b_monitoring:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 10.90.3.0/24
          gateway: 10.90.3.1

  w4b_vpn:
    driver: bridge
    internal: false  # Needs external access
    ipam:
      config:
        - subnet: 10.90.4.0/24
          gateway: 10.90.4.1

volumes:
  w4b_config_grafana: {}
  w4b_config_prometheus: {}
  w4b_config_keycloak: {}
  w4b_config_redis: {}
  w4b_config_vector: {}
  w4b_config_loki: {}
  w4b_config_alertmanager: {}
  w4b_config_timescaledb: {}
  w4b_config_postgres_app: {}
  w4b_config_postgres_keycloak: {}
  w4b_data_timescaledb: {}
  w4b_data_postgres_app: {}
  w4b_data_postgres_keycloak: {}
  w4b_data_redis: {}
  w4b_data_prometheus: {}
  w4b_data_grafana: {}
  w4b_data_loki: {}
  w4b_data_vector: {}

services:
  w4b_timescaledb:
    image: docker.io/timescale/timescaledb:latest-pg16
    container_name: w4b_timescaledb
    networks:
      w4b_database:
        aliases:
          - timescaledb
    ports:
      - "127.0.0.1:30432:5432"  # Local access only
    volumes:
      - w4b_data_timescaledb:/var/lib/postgresql/data
      - w4b_config_timescaledb:/etc/postgresql
    environment:
      POSTGRES_DB: w4b_metrics
      POSTGRES_USER: ${W4B__TIMESCALEDB_USER}
      POSTGRES_PASSWORD: ${W4B__TIMESCALEDB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/timescaledb_user)"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility

  w4b_postgres_app:
    image: docker.io/library/postgres:17.2
    container_name: w4b_postgres_app
    networks:
      w4b_database:
        aliases:
          - postgres_app
    ports:
      - "127.0.0.1:30433:5432"  # Local access only
    volumes:
      - w4b_data_postgres_app:/var/lib/postgresql/data
      - w4b_config_postgres_app:/etc/postgresql
    environment:
      POSTGRES_DB: w4b_app
      POSTGRES_USER: ${W4B__POSTGRES_APP_USER}
      POSTGRES_PASSWORD: ${W4B__POSTGRES_APP_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_app_user)"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility

  w4b_postgres_keycloak:
    image: docker.io/library/postgres:17.2
    container_name: w4b_postgres_keycloak
    networks:
      w4b_database:
        aliases:
          - postgres_keycloak
    ports:
      - "127.0.0.1:30434:5432"  # Changed from 0.0.0.0 to localhost only
    volumes:
      - w4b_data_postgres_keycloak:/var/lib/postgresql/data
      - w4b_config_postgres_keycloak:/etc/postgresql
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${W4B__POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${W4B__POSTGRES_KEYCLOAK_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    shm_size: '1g'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak_db -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G 

  w4b_redis:
    image: docker.io/library/redis:7.2.3
    container_name: w4b_redis
    networks:
      w4b_application:
        aliases:
          - redis
      w4b_database:  # Added for cache persistence
    ports:
      - "127.0.0.1:30379:6379"  # Local access only
    volumes:
      - w4b_data_redis:/data
      - w4b_config_redis:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility

  w4b_keycloak:
    image: docker.io/keycloak/keycloak:23.0.3
    container_name: w4b_keycloak
    networks:
      w4b_frontend:  # For external access
        aliases:
          - keycloak
      w4b_database:  # For DB access
    hostname: keycloak
    dns:
      - 10.90.2.1  # Database network DNS
    extra_hosts:
      - "postgres_keycloak:10.90.2.3"  # Match DB container IP
    ports:
      - "30080:8080"  # Changed from 8443
    volumes:
      - ./config/keycloak:/opt/keycloak/conf
      - ./themes/keycloak:/opt/keycloak/themes/custom
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://w4b_postgres_keycloak:5432/keycloak
      KC_DB_USERNAME: ${W4B__POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${W4B__POSTGRES_KEYCLOAK_PASSWORD}
      KEYCLOAK_ADMIN: ${W4B__KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${W4B__KEYCLOAK_ADMIN_PASSWORD}
      KC_DB_SCHEMA: public
      KC_HOSTNAME: auth.we4bee.network
      KC_PROXY: edge
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_CACHE: local
      KC_LOG_LEVEL: INFO,org.keycloak.services.scheduled:DEBUG,org.keycloak.transaction:DEBUG,org.hibernate:DEBUG
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: "true"  # Fix transaction warning
    depends_on:
      w4b_postgres_keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Fix: Add startup grace period
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility
    command: 
      - "start-dev"
      - "--import-realm"
      - "--http-enabled=true"
      - "--hostname-strict=false"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  w4b_prometheus:
    image: docker.io/prom/prometheus:v2.48.1
    container_name: w4b_prometheus
    networks:
      w4b_monitoring:
        aliases:
          - prometheus
      w4b_vpn:  # For edge device metrics
      w4b_application:  # For API metrics
    hostname: prometheus
    ports:
      - "127.0.0.1:30090:9090"  # Changed from dynamic 9090
    volumes:
      - w4b_data_prometheus:/prometheus
      - w4b_config_prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility

  w4b_alertmanager:
    image: docker.io/prom/alertmanager:v0.26.0
    container_name: w4b_alertmanager
    networks:
      w4b_monitoring:
        aliases:
          - alertmanager
    ports:
      - "30093:9093"  # Changed from 9093
    volumes:
      - ./config/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility

  w4b_grafana:
    image: docker.io/grafana/grafana:10.2.3
    container_name: w4b_grafana
    networks:
      w4b_frontend:  # For UI access
        aliases:
          - grafana
      w4b_monitoring:  # For data source access
    hostname: grafana
    dns:
      - 10.90.3.1  # Monitoring network DNS
    ports:
      - "127.0.0.1:30000:3000"  # Changed from 3000
    volumes:
      - w4b_data_grafana:/var/lib/grafana
      - w4b_config_grafana:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: ${W4B__GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${W4B__GRAFANA_ADMIN_PASSWORD}
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${W4B__GRAFANA_OAUTH_SECRET}
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: "Keycloak"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://keycloak:8443/realms/hive/protocol/openid-connect/auth"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://keycloak:8443/realms/hive/protocol/openid-connect/token"
    depends_on:
      w4b_loki:
        condition: service_started
      w4b_prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  w4b_node_exporter:
    image: docker.io/prom/node-exporter:v1.7.0
    container_name: w4b_node_exporter
    networks:
      w4b_monitoring:
        aliases:
          - node_exporter
    ports:
      - "30100:9100"  # Changed from 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility

  w4b_vector:
    image: docker.io/timberio/vector:0.34.0-alpine
    container_name: w4b_vector
    networks:
      w4b_monitoring:
        aliases:
          - vector
    ports:
      - "127.0.0.1:30686:8686"  # Changed from dynamic 8686
    volumes:
      - w4b_data_vector:/vector
      - w4b_config_vector:/etc/vector/vector.yaml
      - /var/log:/var/log:ro
    command: ["--config-yaml", "/etc/vector/vector.yaml"]  # Fix: Change --config to --config-yaml
    depends_on:
      w4b_loki:
        condition: service_started
    healthcheck:
      test: ["CMD", "vector", "validate", "--config", "/etc/vector/vector.yaml"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Added for Docker compatibility
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    entrypoint: >
      sh -c "vector validate --config /etc/vector/vector.yaml && exec vector --config /etc/vector/vector.yaml"

  w4b_loki:
    image: docker.io/grafana/loki:2.9.3
    container_name: w4b_loki
    networks:
      w4b_monitoring:
        aliases:
          - loki
    ports:
      - "127.0.0.1:30100:3100"  # Changed from 3100
    volumes:
      - w4b_data_loki:/loki
      - w4b_config_loki:/etc/loki
      - ./data/loki:/data
      - ./data/loki/wal:/wal  # Fix: Add persistent volume for WAL
    command: -config.file=/etc/loki/loki-config.yaml
    depends_on: []
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Fix: Set proper user permissions
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    entrypoint: >
      sh -c "mkdir -p /loki/chunks && chmod -R 777 /loki && exec /usr/bin/loki -config.file=/etc/loki/loki-config.yaml"